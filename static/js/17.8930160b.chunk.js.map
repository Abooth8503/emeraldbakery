{"version":3,"sources":["Common/EmeraldDropzone.tsx","Admin/OrderTypeForm.tsx"],"names":["SpinSpinner","styled","FaSpinner","EmeraldDropzone","props","useState","isUploading","set","onDrop","useCallback","acceptedFiles","length","uploadDoc","useDropzone","accept","getRootProps","getInputProps","isDragActive","id","style","width","onClick","e","preventDefault","marginTop","OrderTypeForm","orderTypes","useEmeraldContext","React","showOrderTypes","setShowOrderTypes","setId","undefined","name","setName","description","setDescription","imageUrl","setImageUrl","saveMessage","setSaveMessage","uploadFiles","setUploadFiles","clearFields","sort","a","b","Name","fluid","className","fontFamily","fontSize","marginBottom","variant","typeName","staggerDurationBy","duration","leaveAnimation","enterAnimation","appearAnimation","maintainContainerHeight","easing","map","orderType","Item","action","selectedOrderType","filter","ot","Id","Description","ImageUrl","orderTypeClicked","Group","Label","Control","type","placeholder","onChange","target","value","files","imageUrlAzure","listStyleType","paddingLeft","file","color","size","verticalAlign","src","thumbnail","User","user","payload","FormData","forEach","append","JSON","stringify","console","log","fetch","process","method","body","then","response","ok","Error","setTimeout","error","marginLeft"],"mappings":"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","file":"static/js/17.8930160b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useCallback, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\nimport { FaSpinner } from 'react-icons/fa/index';\n\nconst SpinSpinner = styled(FaSpinner)`\n  @keyframes spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(359deg);\n      transform: rotate(359deg);\n    }\n  }\n  animation: spin 1.5s infinite;\n`;\n\ninterface Props {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  uploadDoc: Function;\n}\n\nfunction EmeraldDropzone(props: Props): React.ReactElement {\n  const [isUploading, set] = useState(false);\n  const onDrop = useCallback((acceptedFiles: Array<File>) => {\n    if (acceptedFiles.length === 0) {\n      return;\n    }\n\n    // fire function uploadDoc from props\n    props.uploadDoc(acceptedFiles, set(false));\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: '.jpeg,.png,.jpg',\n  });\n\n  function ClickUpload(e: React.MouseEvent): void {\n    e.preventDefault();\n    set(true);\n  }\n\n  return (\n    <div id='uploadDoc' {...getRootProps()}>\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p>Drop the files here ...</p>\n      ) : (\n        <React.Fragment>\n          <Button style={{ width: '100%' }} onClick={ClickUpload}>\n            Upload File(s)\n          </Button>\n          {isUploading === true ? (\n            <SpinSpinner style={{ marginTop: '5px' }} data-testid='spinner' />\n          ) : null}\n        </React.Fragment>\n      )}\n    </div>\n  );\n}\n\nexport default EmeraldDropzone;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport * as React from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Image,\n  Jumbotron,\n  ListGroup,\n  Form,\n  Button,\n} from 'react-bootstrap';\nimport FlipMove from 'react-flip-move';\nimport { OrderType, useEmeraldContext } from '../Interfaces/EmeraldTypes';\nimport EmeraldDropzone from '../Common/EmeraldDropzone';\nimport { FaCheck } from 'react-icons/fa';\n\ntype Props = {\n  user: string;\n};\n\nfunction OrderTypeForm(props: Props) {\n  const { orderTypes } = useEmeraldContext();\n  const [showOrderTypes, setShowOrderTypes] = React.useState<boolean>(false);\n  const [id, setId] = React.useState<number>(0);\n  const [name, setName] = React.useState<string | undefined>(undefined);\n  const [description, setDescription] = React.useState<string | undefined>(undefined);\n  const [imageUrl, setImageUrl] = React.useState<string | undefined>(undefined);\n  const [saveMessage, setSaveMessage] = React.useState<string | undefined>(undefined);\n  // dropzone\n  const [uploadFiles, setUploadFiles] = React.useState<Array<File>>([]);\n\n  function orderTypeClicked(id: OrderType['Id']) {\n    setShowOrderTypes(!showOrderTypes);\n    const selectedOrderType = orderTypes.filter((ot) => ot.Id === id);\n    setId(selectedOrderType[0].Id);\n    setName(selectedOrderType[0].Name);\n    if (selectedOrderType[0].Description === null) {\n      setDescription('');\n    } else {\n      setDescription(selectedOrderType[0].Description);\n    }\n    if (\n      selectedOrderType[0].ImageUrl == '' ||\n      selectedOrderType[0].ImageUrl === undefined ||\n      selectedOrderType[0].ImageUrl === null ||\n      selectedOrderType[0].ImageUrl.length === 0\n    ) {\n      setImageUrl(\n        'https://emeraldorderfunctionstor.blob.core.windows.net/emeraldbakery/defaultOrderImage_min.png'\n      );\n    } else {\n      setImageUrl(selectedOrderType[0].ImageUrl);\n    }\n  }\n\n  function onClickshowOrderTypes(e: React.MouseEvent) {\n    e.preventDefault();\n    setShowOrderTypes(!showOrderTypes);\n  }\n\n  function onChangeName(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    setName(e.target.value);\n  }\n\n  function onChangeDescription(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    setDescription(e.target.value);\n  }\n\n  function GetUploadImage(files: Array<File>): void {\n    setUploadFiles(files);\n    const imageUrlAzure = `https://emeraldorderfunctionstor.blob.core.windows.net/emeraldbakery/${files[0].name}`;\n    setImageUrl(imageUrlAzure);\n  }\n\n  function clearFields(): void {\n    setName('');\n    setId(0);\n    setDescription('');\n    setImageUrl('');\n  }\n\n  function formSubmit(): void {\n    const orderType = {\n      Id: id,\n      Name: name,\n      Description: description,\n      ImageUrl: imageUrl,\n      User: props.user,\n    };\n\n    const payload = new FormData();\n\n    uploadFiles.forEach((file) => {\n      payload.append('file', file);\n    });\n\n    payload.append('ordertype', JSON.stringify(orderType));\n\n    console.log('order type obj', orderType);\n    try {\n      fetch(\n        // 'http://localhost:7071/api/Function1', //   fetch(\n        `https://emeraldordertype.azurewebsites.net/api/Function1?code=${process.env.REACT_APP_ORDERTYPE_FUNC_KEY}`,\n        {\n          method: 'POST',\n          body: payload,\n        }\n      ).then((response) => {\n        if (!response.ok) {\n          throw Error('Network Request failed');\n        }\n\n        setSaveMessage('Order Type saved!');\n\n        setTimeout(() => {\n          clearFields();\n          setSaveMessage('');\n        }, 4000);\n\n        return response;\n      });\n    } catch (error) {\n      console.log('order type error', error);\n    }\n  }\n\n  if (orderTypes.length === 0) {\n    return <div>Order Types not ready.</div>;\n  }\n\n  orderTypes.sort((a: OrderType, b: OrderType) => {\n    if (a.Name !== undefined && b.Name !== undefined) {\n      if (a.Name > b.Name) {\n        return 1;\n      }\n    }\n\n    return -1;\n  });\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col className='text-center'>\n          <Jumbotron>\n            <h1 style={{ fontFamily: 'AmaticSC-Bold', fontSize: 'xxx-large' }}>\n              Order Type Form\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n      <Button\n        onClick={onClickshowOrderTypes}\n        style={{ marginBottom: '5px' }}\n        variant='secondary'\n      >\n        Show Order Types\n      </Button>\n      {showOrderTypes ? (\n        <FlipMove\n          typeName='ListGroup'\n          staggerDurationBy='22'\n          duration={500}\n          leaveAnimation='elevator'\n          enterAnimation='elevator'\n          appearAnimation='elevator'\n          maintainContainerHeight={true}\n          easing='cubic-bezier(0.39, 0.0, 0.45, 1.4)'\n        >\n          {orderTypes.map((orderType: OrderType) => {\n            return (\n              <ListGroup.Item\n                key={orderType.Id}\n                action\n                onClick={() => orderTypeClicked(orderType.Id)}\n              >\n                {orderType.Name}\n              </ListGroup.Item>\n            );\n          })}\n        </FlipMove>\n      ) : null}\n      <Form>\n        <Form.Group>\n          <Form.Label>Name</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Enter name of order type'\n            onChange={onChangeName}\n            value={name}\n          />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Description</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Enter description of order type'\n            onChange={onChangeDescription}\n            value={description}\n          />\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Upload Image</Form.Label>\n          <EmeraldDropzone uploadDoc={GetUploadImage} />\n          {uploadFiles !== undefined ? (\n            <ul style={{ listStyleType: 'none', paddingLeft: '0px', marginTop: '0px' }}>\n              {uploadFiles.map((file: File) => (\n                <li key={file.name}>\n                  <FaCheck color='green' size={22} style={{ marginTop: '10px' }} />\n                  <span\n                    style={{\n                      color: '#005ea2',\n                      marginTop: '10px',\n                      verticalAlign: 'bottom',\n                    }}\n                    data-testid='uploadfilename'\n                  >\n                    {file.name}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          ) : null}\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label>Image</Form.Label>\n          <Image src={imageUrl} thumbnail />\n        </Form.Group>\n\n        <Form.Group>\n          <Button onClick={formSubmit}>Save</Button>\n          <Button onClick={clearFields} style={{ marginLeft: '5px' }}>\n            Clear\n          </Button>\n          <Form.Label>{saveMessage}</Form.Label>\n        </Form.Group>\n      </Form>\n    </Container>\n  );\n}\n\nexport default OrderTypeForm;\n"],"sourceRoot":""}