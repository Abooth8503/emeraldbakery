{"version":3,"sources":["../node_modules/use-places-autocomplete/dist/index.esm.js","Gmap.tsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","useLatest","val","ref","useRef","current","getGeocode","args","geocoder","window","google","maps","Geocoder","Promise","resolve","reject","geocode","results","status","address","componentRestrictions","console","error","getLatLng","result","_result$geometry$loca","geometry","location","lat","lng","getZipCode","useShortName","zipCode","address_components","forEach","_ref","long_name","short_name","types","includes","usePlacesAutocomplete","_temp","requestOptions","_ref$debounce","debounce","_ref$cache","cache","googleMaps","callbackName","_ref$defaultValue","defaultValue","_ref$initOnMount","initOnMount","_useState","useState","ready","setReady","_useState2","value","setVal","_useState3","loading","data","suggestions","setSuggestions","asRef","requestOptionsRef","googleMapsRef","init","useCallback","_google$maps","gMaps","placesLib","places","AutocompleteService","clearSuggestions","fetchPredictions","fn","delay","timer","_this","_len","Array","_key","clearTimeout","setTimeout","_debounce","prevState","cachedData","JSON","parse","sessionStorage","getItem","keys","reduce","acc","maxAge","Date","now","getPlacePredictions","input","setItem","stringify","setValue","shouldFetchData","useEffect","labels","labelIndex","GMap","googleMapRef","React","setOrdersMap","googleMap","undefined","googleMapScript","document","getElementById","a","getOrders","Request","process","method","emeraldGet","currentDayOrders","filter","day","moment","DeliveryDate","format","initGoogleMap","setMarkers","log","fetchEmeraldOrders","Map","center","zoom","addMarker","map","order","newMarker","Marker","animation","Animation","DROP","position","label","Name","mapAddress","Address","City","State","encodedAddress","encodeURI","addressToUse","contentString","infowindow","InfoWindow","content","addListener","open","markerOrders","mark","ZipCode","style","width","height"],"mappings":"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","file":"static/js/18.b1677128.chunk.js","sourcesContent":["import { useRef, useState, useCallback, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar useLatest = (function (val) {\n  var ref = useRef(val);\n  ref.current = val;\n  return ref;\n});\n\nvar _debounce = (function (fn, delay) {\n  var timer; // eslint-disable-next-line func-names\n\n  return function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (timer !== null) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    timer = setTimeout(function () {\n      return fn.apply(_this, args);\n    }, delay);\n  };\n});\n\nvar loadApiErr = \"ðŸ’¡ use-places-autocomplete: Google Maps Places API library must be loaded. See: https://github.com/wellyshen/use-places-autocomplete#load-the-library\";\n\nvar usePlacesAutocomplete = function usePlacesAutocomplete(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      requestOptions = _ref.requestOptions,\n      _ref$debounce = _ref.debounce,\n      debounce = _ref$debounce === void 0 ? 200 : _ref$debounce,\n      _ref$cache = _ref.cache,\n      cache = _ref$cache === void 0 ? 24 * 60 * 60 : _ref$cache,\n      googleMaps = _ref.googleMaps,\n      callbackName = _ref.callbackName,\n      _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? \"\" : _ref$defaultValue,\n      _ref$initOnMount = _ref.initOnMount,\n      initOnMount = _ref$initOnMount === void 0 ? true : _ref$initOnMount;\n\n  var _useState = useState(false),\n      ready = _useState[0],\n      setReady = _useState[1];\n\n  var _useState2 = useState(defaultValue),\n      value = _useState2[0],\n      setVal = _useState2[1];\n\n  var _useState3 = useState({\n    loading: false,\n    status: \"\",\n    data: []\n  }),\n      suggestions = _useState3[0],\n      setSuggestions = _useState3[1];\n\n  var asRef = useRef(null);\n  var requestOptionsRef = useLatest(requestOptions);\n  var googleMapsRef = useLatest(googleMaps);\n  var init = useCallback(function () {\n    var _google$maps;\n\n    if (asRef.current) return;\n    var _window = window,\n        google = _window.google;\n    var gMaps = googleMapsRef.current;\n    var placesLib = (gMaps == null ? void 0 : gMaps.places) || (google == null ? void 0 : (_google$maps = google.maps) == null ? void 0 : _google$maps.places);\n\n    if (!placesLib) {\n      console.error(loadApiErr);\n      return;\n    }\n\n    asRef.current = new placesLib.AutocompleteService();\n    setReady(true);\n  }, []);\n  var clearSuggestions = useCallback(function () {\n    setSuggestions({\n      loading: false,\n      status: \"\",\n      data: []\n    });\n  }, []);\n  var fetchPredictions = useCallback(_debounce(function (val) {\n    if (!val) {\n      clearSuggestions();\n      return;\n    }\n\n    setSuggestions(function (prevState) {\n      return _extends({}, prevState, {\n        loading: true\n      });\n    });\n    var cachedData = JSON.parse(sessionStorage.getItem(\"upa\") || \"{}\");\n\n    if (cache) {\n      cachedData = Object.keys(cachedData).reduce(function (acc, key) {\n        if (cachedData[key].maxAge - Date.now() >= 0) acc[key] = cachedData[key];\n        return acc;\n      }, {});\n\n      if (cachedData[val]) {\n        setSuggestions({\n          loading: false,\n          status: \"OK\",\n          data: cachedData[val].data\n        });\n        return;\n      }\n    } // @ts-expect-error\n\n\n    asRef.current.getPlacePredictions(_extends({}, requestOptionsRef.current, {\n      input: val\n    }), function (data, status) {\n      setSuggestions({\n        loading: false,\n        status: status,\n        data: data || []\n      });\n\n      if (cache && status === \"OK\") {\n        cachedData[val] = {\n          data: data,\n          maxAge: Date.now() + cache * 1000\n        };\n\n        try {\n          sessionStorage.setItem(\"upa\", JSON.stringify(cachedData));\n        } catch (error) {// skip exception\n        }\n      }\n    });\n  }, debounce), [debounce, clearSuggestions]);\n  var setValue = useCallback(function (val, shouldFetchData) {\n    if (shouldFetchData === void 0) {\n      shouldFetchData = true;\n    }\n\n    setVal(val);\n    if (asRef.current && shouldFetchData) fetchPredictions(val);\n  }, [fetchPredictions]);\n  useEffect(function () {\n    if (!initOnMount) return function () {\n      return null;\n    };\n    var _window2 = window,\n        google = _window2.google;\n\n    if (!googleMapsRef.current && !(google != null && google.maps) && callbackName) {\n      window[callbackName] = init;\n    } else {\n      init();\n    }\n\n    return function () {\n      // @ts-expect-error\n      if (window[callbackName]) delete window[callbackName];\n    };\n  }, [callbackName, init]);\n  return {\n    ready: ready,\n    value: value,\n    suggestions: suggestions,\n    setValue: setValue,\n    clearSuggestions: clearSuggestions,\n    init: init\n  };\n};\n\n/* eslint-disable compat/compat */\nvar geocodeErr = \"ðŸ’¡ use-places-autocomplete: Please provide an address when using getGeocode() with the componentRestrictions.\";\nvar getGeocode = function getGeocode(args) {\n  var geocoder = new window.google.maps.Geocoder();\n  return new Promise(function (resolve, reject) {\n    geocoder.geocode(args, function (results, status) {\n      if (status !== \"OK\") reject(status);\n\n      if (!args.address && args.componentRestrictions) {\n        console.error(geocodeErr);\n        resolve(results);\n      }\n\n      resolve(results);\n    });\n  });\n};\nvar getLatLng = function getLatLng(result) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var _result$geometry$loca = result.geometry.location,\n          lat = _result$geometry$loca.lat,\n          lng = _result$geometry$loca.lng;\n      resolve({\n        lat: lat(),\n        lng: lng()\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nvar getZipCode = function getZipCode(result, useShortName) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var zipCode = null;\n      result.address_components.forEach(function (_ref) {\n        var long_name = _ref.long_name,\n            short_name = _ref.short_name,\n            types = _ref.types;\n        if (types.includes(\"postal_code\")) zipCode = useShortName ? short_name : long_name;\n      });\n      resolve(zipCode);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nvar getDetailsErr = \"ðŸ’¡ use-places-autocomplete: Please provide a place Id when using getDetails() either as a string or as part of an Autocomplete Prediction.\";\nvar getDetails = function getDetails(args) {\n  var PlacesService = new window.google.maps.places.PlacesService(document.createElement(\"div\"));\n\n  if (!args.placeId) {\n    console.error(getDetailsErr);\n    return Promise.reject(getDetailsErr);\n  }\n\n  return new Promise(function (resolve, reject) {\n    PlacesService.getDetails(args, function (results, status) {\n      if (status !== \"OK\") reject(status);\n      resolve(results);\n    });\n  });\n};\n\nexport default usePlacesAutocomplete;\nexport { getDetails, getGeocode, getLatLng, getZipCode };\n","/// <reference types=\"google.maps\" />\nimport React, { useEffect, useState } from 'react';\nimport { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport { Order, emeraldGet } from './Interfaces/EmeraldTypes';\nimport moment from 'moment';\n\nconst labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nlet labelIndex = 0;\n\nfunction GMap(): JSX.Element {\n  const mapRef: HTMLDivElement | null = null;\n  const googleMapRef = React.useRef<HTMLDivElement | null>(mapRef);\n  // eslint-disable-next-line\n  const [ordersMap, setOrdersMap] = useState<Order[]>();\n  let googleMap: google.maps.Map | undefined = undefined;\n\n  useEffect(() => {\n    const googleMapScript = document.getElementById('googlescript');\n    async function fetchEmeraldOrders(): Promise<void> {\n      try {\n        const getOrders = new Request(\n          `https://emeraldorderfunction.azurewebsites.net/api/Function1?code=${process.env.REACT_APP_FUNC_KEY}`,\n          {\n            method: 'GET',\n          }\n        );\n\n        const data = await emeraldGet<Order[]>(getOrders);\n\n        if (data.length > 0) {\n          const currentDayOrders = data.filter((day) => {\n            if (\n              moment(day.DeliveryDate).format('MM-DD-YYYY') ==\n              moment(new Date()).format('MM-DD-YYYY')\n            ) {\n              return day;\n            }\n          });\n          setOrdersMap(currentDayOrders);\n\n          if (googleMapScript !== null) {\n            googleMap = initGoogleMap();\n            setMarkers(currentDayOrders);\n          }\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchEmeraldOrders();\n  }, []);\n\n  // initialize the google map\n  const initGoogleMap = (): google.maps.Map => {\n    return new google.maps.Map(googleMapRef.current as HTMLElement, {\n      center: { lat: 29.56638929999999, lng: -98.3988705 },\n      zoom: 10,\n    });\n  };\n\n  function addMarker(\n    location: google.maps.LatLngLiteral,\n    map: google.maps.Map,\n    order: Order\n  ): void {\n    // Add the marker at the clicked location, and add the next-available label\n    // from the array of alphabetical characters.\n    const newMarker = new google.maps.Marker({\n      animation: google.maps.Animation.DROP,\n      position: location,\n      label: `${labels[labelIndex++ % labels.length]} ${order.Name}`,\n      map: map,\n    });\n\n    const mapAddress = `${order.Address} ${order.City},${order.State}`;\n    const encodedAddress = encodeURI(mapAddress);\n    const addressToUse = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`;\n\n    const contentString = `<h3>\n        <a href='${addressToUse}'>${order.Address}</a>\n      </h3>\n    `;\n\n    const infowindow = new google.maps.InfoWindow({\n      content: contentString,\n    });\n\n    newMarker.addListener('click', () => {\n      infowindow.open(map, newMarker);\n    });\n  }\n\n  async function setMarkers(markerOrders: Order[]): Promise<void> {\n    return markerOrders.forEach(async (order) => {\n      const address = `${order.Address}, ${order.City}, ${order.State} ${order.ZipCode}`;\n\n      const results = await getGeocode({ address });\n      const { lat, lng } = await getLatLng(results[0]);\n\n      if (googleMap !== undefined) {\n        addMarker({ lat, lng }, googleMap, order);\n      }\n    });\n  }\n\n  return (\n    <div\n      ref={googleMapRef}\n      style={{ width: 600, height: '100%', position: 'absolute' }}\n    />\n  );\n}\n\nexport default GMap;\n"],"sourceRoot":""}